ext.moduleName = 'aion.vm.api'

// set the publish to true when the code ready to push the lib to the maven repo
def publish = false;

apply plugin: 'java'
apply plugin: 'idea'

targetCompatibility = 10
sourceCompatibility = 10

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.

    // temprary using the staging repo as the test dependency
    maven { url "https://oss.sonatype.org/content/groups/staging" }

    jcenter()
}

def getCommitHash = { ->
    def hashStdOut = new ByteArrayOutputStream()
    exec {
        commandLine "sh", "-c", "git log --pretty=format:%h | head -1"
        standardOutput = hashStdOut
    }

    return hashStdOut.toString().trim()
}

sourceSets {
    if (publish) {
        version = "0.4.0"
    } else {
        jar.baseName = 'vm-api-' + getCommitHash()
    }

    main {
        java.srcDirs = ['src']
    }
    test {
        java.srcDirs = ['test']
    }
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile files("${rootProject.projectDir}/lib/aion-types-e367876.jar")
    testCompile 'junit:junit:4.12'
    testCompile 'pl.pragmatists:JUnitParams:1.1.1'
}

clean {
    delete 'build'
}


// For publishing the lib to the maven repo

apply plugin: 'maven'
apply plugin: 'signing'

group = "network.aion"
archivesBaseName = "vm-api4j"

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
    options.tags = ["implNote", "apiNote"]
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('-module-path', classpath.asPath)
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
sourcesJar.enabled = publish

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}
javadocJar.enabled = publish

artifacts {
    archives sourcesJar, javadocJar
}

uploadArchives {
    repositories {
        mavenDeployer {

            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'vm-api4j'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'a vm-api module for the aion java kernel.'
                url 'https://github.com/aionnetwork/vm_api'

                scm {
                    connection 'scm:git:https://github.com/aionnetwork/aion.git'
                    developerConnection 'git:https://github.com/aionnetwork/aion.git'
                    url 'https://github.com/aionnetwork/aion/tree/master'
                }

                licenses {
                    license {
                        name 'MIT'
                        url 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id 'aion foundation dev'
                        name 'aion foundation dev'
                        email 'toengineering@aion.network'
                    }
                }
            }
        }
    }
}
uploadArchives.enabled = publish

signing {
    sign configurations.archives
}
signArchives.enabled = publish
